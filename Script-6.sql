DROP TABLE SETTINGS;
DROP TABLE EVENT_INTERESTED;
DROP TABLE EVENT_HOSTING;

DROP TABLE COMMENT_REACT;
DROP TABLE POST_DESC;
DROP TABLE REPLY_REACT;
DROP TABLE POST_REACT;


DROP TABLE PAGE_OWNED;
DROP TABLE POST_SHARED_BY_USER;
DROP TABLE POST_SHARED_IN_PAGE;
DROP TABLE MARKETPLACE_OWNING;
DROP TABLE MARKETPLACE_MEDIA;
DROP TABLE PAGE_MEDIA;
DROP TABLE MESSAGE_MEDIA;
DROP TABLE POST_IN_PAGE;
DROP TABLE POST_MEDIA;
DROP TABLE EVENT_MEDIA;
DROP TABLE MARKETPLACE;
DROP TABLE COMMENT_REPLY;
DROP TABLE EVENTS;
DROP TABLE POST_COMMENT;
DROP TABLE MESSAGE;
DROP TABLE PAGE;
DROP TABLE POST;

DROP TABLE MEDIA;
DROP TABLE FRIEND_REQ;
DROP TABLE BEFRIENDS;
DROP TABLE PAGE_LIKE;


CREATE TABLE REACTIONS(
	TYPE_OF_REACTION VARCHAR(10) UNIQUE NOT NULL
);

CREATE TABLE MEDIA_TYPE(
	MEDIA_TYPE VARCHAR(10) UNIQUE NOT NULL
);

CREATE TABLE POST_TYPE(
	TYPE_OF_POST VARCHAR(10) UNIQUE NOT NULL
);

CREATE TABLE GROUP_TYPE(
	TYPE_OF_GROUP VARCHAR(10) UNIQUE NOT NULL
);

CREATE TABLE USERS(
	USER_ID NUMBER GENERATED ALWAYS AS IDENTITY UNIQUE NOT NULL,
    USER_NAME VARCHAR(50) NOT NULL,
    PASSWORD VARCHAR(50) NOT NULL,
    MOBILE_NUMBER VARCHAR(20) NOT NULL,
    BIRTH_DATE DATE NOT NULL,
	EMAIL VARCHAR(320) NOT NULL,
    PRIMARY KEY(EMAIL,PASSWORD)
);

CREATE TABLE MEDIA(
	MEDIA_ID NUMBER GENERATED ALWAYS AS IDENTITY,
	MEDIA_TYPE VARCHAR(10) NOT NULL,
	PRIMARY KEY (MEDIA_ID),
	FOREIGN KEY (MEDIA_TYPE) REFERENCES MEDIA_TYPE(MEDIA_TYPE) ON DELETE CASCADE
);

CREATE TABLE CARD_DESCRIPTION(
	DESCRIPTION_ID NUMBER GENERATED ALWAYS AS IDENTITY,
	INIT_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATE_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	DESCRIPTION VARCHAR(2000),
	PRIMARY KEY (DESCRIPTION_ID)
);

CREATE TABLE CARD_DESCRIPTION_MEDIA(
	DESCRIPTION_ID NUMBER,
	MEDIA_ID NUMBER,
	FOREIGN KEY (DESCRIPTION_ID) REFERENCES CARD_DESCRIPTION (DESCRIPTION_ID) ON DELETE CASCADE,
	FOREIGN KEY (MEDIA_ID) REFERENCES MEDIA (MEDIA_ID) ON DELETE CASCADE,
	PRIMARY KEY(DESCRIPTION_ID, MEDIA_ID)
);

CREATE TABLE SETTINGS (
	USER_ID NUMBER,
	FOREGROUND_COLOR VARCHAR(10) DEFAULT '87CEEB' NOT NULL,
	BACKGROUND_COLOR VARCHAR(10) DEFAULT 'FFFFFF' NOT NULL,
	TEXT_COLOR VARCHAR(20) DEFAULT '000000' NOT NULL,
	PRIMARY KEY(USER_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

CREATE TABLE MESSAGE(
	MESSAGE_ID NUMBER GENERATED ALWAYS AS IDENTITY,
	RECEIVER_ID NUMBER NOT NULL,
	SENDER_ID NUMBER NOT NULL,
	DESCRIPTION_ID NUMBER,
	PRIMARY KEY (MESSAGE_ID),
	FOREIGN KEY (RECEIVER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (SENDER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (DESCRIPTION_ID) REFERENCES CARD_DESCRIPTION(DESCRIPTION_ID) ON DELETE CASCADE
);


CREATE TABLE POST(
	POST_ID NUMBER GENERATED ALWAYS AS IDENTITY,
	USER_ID NUMBER NOT NULL,
	DESCRIPTION_ID NUMBER NOT NULL,
	POST_OF VARCHAR(10) NOT NULL,
	PRIMARY KEY (POST_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (DESCRIPTION_ID) REFERENCES CARD_DESCRIPTION (DESCRIPTION_ID) ON DELETE CASCADE,
	FOREIGN KEY (POST_OF) REFERENCES POST_TYPE(TYPE_OF_POST) ON DELETE CASCADE
);


CREATE TABLE USER_PROFILE_PIC(
	USER_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL,
	POST_ID NUMBER NOT NULL,
	PRIMARY KEY (USER_ID,POST_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (POST_ID) REFERENCES POST (POST_ID) ON DELETE CASCADE
);

CREATE TABLE USER_COVER_PHOTO(
	USER_ID NUMBER NOT NULL,
	POST_ID NUMBER NOT NULL,
	PRIMARY KEY (USER_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (POST_ID) REFERENCES POST (POST_ID) ON DELETE CASCADE
);

CREATE TABLE SUGGESTIONS (
	POST_ID NUMBER NOT NULL,
	USER_ID NUMBER NOT NULL,
	FOREIGN KEY (USER_ID) REFERENCES SETTINGS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID) ON DELETE CASCADE
);

CREATE TABLE GROUPS(
	GROUP_ID NUMBER GENERATED ALWAYS AS IDENTITY,
	GROUP_NAME VARCHAR(50) NOT NULL,
	GROUP_TYPE VARCHAR(20) NOT NULL,
	DESCRIPTION_ID NUMBER,
	PRIMARY KEY (GROUP_ID),
	FOREIGN KEY (DESCRIPTION_ID) REFERENCES CARD_DESCRIPTION(DESCRIPTION_ID) ON DELETE CASCADE,
	FOREIGN KEY (GROUP_TYPE) REFERENCES GROUP_TYPE(TYPE_OF_GROUP) ON DELETE CASCADE
);

CREATE TABLE GROUP_CHAT(
	GROUP_ID NUMBER NOT NULL,
	MESSAGE_ID NUMBER NOT NULL,
	FOREIGN KEY (GROUP_ID) REFERENCES GROUPS(GROUP_ID) ON DELETE CASCADE,
	FOREIGN KEY (MESSAGE_ID) REFERENCES MESSAGE(MESSAGE_ID) ON DELETE CASCADE
);

CREATE TABLE POST_COMMENT (
	COMMENT_ID NUMBER GENERATED ALWAYS AS IDENTITY,
	MEDIA_ID NUMBER NOT NULL,
	POST_ID NUMBER NOT NULL,
	USER_ID NUMBER NOT NULL,
	DESCRIPTION_ID NUMBER NOT NULL,
	PRIMARY KEY (COMMENT_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID) ON DELETE CASCADE,
	FOREIGN KEY (MEDIA_ID) REFERENCES MEDIA(MEDIA_ID) ON DELETE CASCADE,
	FOREIGN KEY (DESCRIPTION_ID) REFERENCES CARD_DESCRIPTION(DESCRIPTION_ID) ON DELETE CASCADE
);

CREATE TABLE COMMENT_REPLY(
	REPLY_ID NUMBER GENERATED ALWAYS AS IDENTITY,
	MEDIA_ID NUMBER NOT NULL,
	COMMENT_ID NUMBER NOT NULL,
	USER_ID NUMBER NOT NULL,
	DESCRIPTION_ID NUMBER NOT NULL,
	PRIMARY KEY (REPLY_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (COMMENT_ID) REFERENCES POST_COMMENT(COMMENT_ID) ON DELETE CASCADE,
	FOREIGN KEY (MEDIA_ID) REFERENCES MEDIA(MEDIA_ID) ON DELETE CASCADE,
	FOREIGN KEY (DESCRIPTION_ID) REFERENCES CARD_DESCRIPTION(DESCRIPTION_ID) ON DELETE CASCADE
);

CREATE TABLE MARKETPLACE(
	USER_ID NUMBER NOT NULL,
	PRODUCT_NAME VARCHAR(50) NOT NULL,
	MARKETPLACE_ID NUMBER GENERATED ALWAYS AS IDENTITY,
	PRICE FLOAT NOT NULL,
	DESCRIPTION_ID NUMBER NOT NULL,
	PRIMARY KEY (MARKETPLACE_ID),
	FOREIGN KEY (DESCRIPTION_ID) REFERENCES CARD_DESCRIPTION(DESCRIPTION_ID) ON DELETE CASCADE,
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

CREATE TABLE EVENTS(
	EVENT_NAME VARCHAR(50) NOT NULL,
	START_TIME TIMESTAMP,
	END_TIME TIMESTAMP,
	LOCATION VARCHAR(500),
	EVENT_ID NUMBER GENERATED ALWAYS AS IDENTITY,
	DESCRIPTION_ID NUMBER,
	PRIMARY KEY (EVENT_ID),
	FOREIGN KEY (DESCRIPTION_ID) REFERENCES CARD_DESCRIPTION(DESCRIPTION_ID) ON DELETE CASCADE
);

CREATE TABLE EVENT_HOSTING(
	EVENT_ID NUMBER NOT NULL,
	USER_ID NUMBER NOT NULL,
	PRIMARY KEY (EVENT_ID, USER_ID),
	FOREIGN KEY (EVENT_ID) REFERENCES EVENTS(EVENT_ID) ON DELETE CASCADE,
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

CREATE TABLE EVENT_INTERESTED(
	EVENT_ID NUMBER NOT NULL,
	USER_ID NUMBER NOT NULL,
	PRIMARY KEY (EVENT_ID, USER_ID),
	FOREIGN KEY (EVENT_ID) REFERENCES EVENTS(EVENT_ID) ON DELETE CASCADE,
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

CREATE TABLE POST_SHARED_IN_EVENT_DISCUSSION(
	POST_ID NUMBER NOT NULL,
	EVENT_ID NUMBER  NOT NULL,
	SHARE_ID NUMBER GENERATED ALWAYS AS IDENTITY,
	SHARE_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	SHARE_MESSAGE VARCHAR(2000),
	PRIMARY KEY (SHARE_ID),
	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID) ON DELETE CASCADE,
	FOREIGN KEY (EVENT_ID) REFERENCES EVENTS(EVENT_ID) ON DELETE CASCADE
);

CREATE TABLE POST_IN_EVENT_DISCUSSION(
	POST_ID NUMBER NOT NULL,
	EVENT_ID NUMBER NOT NULL,
	PRIMARY KEY (POST_ID),
	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID) ON DELETE CASCADE,
	FOREIGN KEY (EVENT_ID) REFERENCES EVENTS(EVENT_ID) ON DELETE CASCADE
);

CREATE TABLE POST_SHARED_IN_GROUP(
	POST_ID NUMBER NOT NULL,
	GROUP_ID NUMBER NOT NULL,
	SHARE_ID NUMBER GENERATED ALWAYS AS IDENTITY,
	SHARE_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	SHARE_MESSAGE VARCHAR(2000),
	PRIMARY KEY (SHARE_ID),
	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID) ON DELETE CASCADE,
	FOREIGN KEY (GROUP_ID) REFERENCES GROUPS(GROUP_ID) ON DELETE CASCADE
);

CREATE TABLE POST_IN_GROUP(
	POST_ID NUMBER NOT NULL,
	GROUP_ID NUMBER NOT NULL,
	PRIMARY KEY (POST_ID, GROUP_ID),
	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID) ON DELETE CASCADE,
	FOREIGN KEY (GROUP_ID) REFERENCES GROUPS(GROUP_ID) ON DELETE CASCADE
);

CREATE TABLE GROUP_MEMBERS(
	USER_ID NUMBER NOT NULL,
	GROUP_ID NUMBER NOT NULL,
	PRIMARY KEY (USER_ID, GROUP_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (GROUP_ID) REFERENCES GROUPS(GROUP_ID) ON DELETE CASCADE
);

CREATE TABLE GROUP_OWNED(
	USER_ID NUMBER NOT NULL,
	GROUP_ID NUMBER NOT NULL,
	PRIMARY KEY (USER_ID, GROUP_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (GROUP_ID) REFERENCES GROUPS(GROUP_ID) ON DELETE CASCADE
);

CREATE TABLE BEFRIENDS(
	USER_ID NUMBER NOT NULL,
	FRIEND_ID NUMBER NOT NULL,
	PRIMARY KEY (USER_ID, FRIEND_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (FRIEND_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

CREATE TABLE FRIEND_REQ(
	USER_ID NUMBER NOT NULL,
	FRIEND_REQ_ID NUMBER NOT NULL,
	PRIMARY KEY (USER_ID, FRIEND_REQ_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (FRIEND_REQ_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

CREATE TABLE POST_SHARED_BY_USER(
	USER_ID NUMBER NOT NULL,
	POST_ID NUMBER NOT NULL,
	SHARE_ID NUMBER GENERATED ALWAYS AS IDENTITY,
	SHARE_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	SHARE_MESSAGE VARCHAR(2000),
	PRIMARY KEY (SHARE_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID) ON DELETE CASCADE
);

CREATE TABLE POST_REACT(
	REACTION VARCHAR(10) NOT NULL,
	USER_ID NUMBER NOT NULL,
	POST_ID NUMBER NOT NULL,
	PRIMARY KEY(USER_ID,POST_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID) ON DELETE CASCADE,
	FOREIGN KEY (REACTION) REFERENCES REACTIONS(TYPE_OF_REACTION) ON DELETE CASCADE
);

CREATE TABLE COMMENT_REACT(
	REACTION VARCHAR(10) NOT NULL,
	USER_ID NUMBER NOT NULL,
	COMMENT_ID NUMBER NOT NULL,
	PRIMARY KEY(USER_ID,COMMENT_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (COMMENT_ID) REFERENCES POST_COMMENT(COMMENT_ID) ON DELETE CASCADE,
	FOREIGN KEY (REACTION) REFERENCES REACTIONS(TYPE_OF_REACTION) ON DELETE CASCADE
);

CREATE TABLE REPLY_REACT(
	REACTION VARCHAR(10) NOT NULL,
	USER_ID NUMBER NOT NULL,
	REPLY_ID NUMBER NOT NULL,
	PRIMARY KEY(USER_ID,REPLY_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (REPLY_ID) REFERENCES COMMENT_REPLY(REPLY_ID) ON DELETE CASCADE,
	FOREIGN KEY (REACTION) REFERENCES REACTIONS(TYPE_OF_REACTION) ON DELETE CASCADE
);

CREATE OR REPLACE TRIGGER insert_settings_after_insert_user_trigger
	AFTER INSERT ON USERS
	FOR EACH ROW
	BEGIN
	INSERT INTO SETTINGS (USER_ID) VALUES (:NEW.USER_ID);
	END;
	/
DROP TRIGGER FBDB.INSERT_SETTINGS_AFTER_INSERT_USER_TRIGGER;
INSERT INTO USERS (user_name, password, mobile_number, birth_date,email) VALUES (  '1234', '12344', '123', sysdate,'2345');
	SELECT * FROM USERS u ;
COMMIT;

-- CREATE OR REPLACE TRIGGER delete_user_trigger
-- 	AFTER DELETE ON USERS
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM USER_PROFILE_PIC WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM USER_COVER_PHOTO WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM SETTINGS WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM MESSAGE WHERE SENDER_ID = :OLD.USER_ID OR RECEIVER_ID = :OLD.USER_ID;
-- 	DELETE FROM POST WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM POST_COMMENT WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM COMMENT_REPLY WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM MARKETPLACE WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM EVENT_HOSTING WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM EVENT_INTERESTED WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM GROUP_MEMBERS WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM GROUP_OWNED WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM BEFRIENDS WHERE USER_ID = :OLD.USER_ID OR FRIEND_ID = :OLD.USER_ID;
-- 	DELETE FROM FRIEND_REQ WHERE USER_ID = :OLD.USER_ID OR FRIEND_REQ_ID = :OLD.USER_ID;
-- 	DELETE FROM POST_SHARED_BY_USER WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM POST_REACT WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM COMMENT_REACT WHERE USER_ID = :OLD.USER_ID;
-- 	DELETE FROM REPLY_REACT WHERE USER_ID = :OLD.USER_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_user_profile_pic_trigger
-- 	AFTER DELETE ON USER_PROFILE_PIC
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM POST WHERE POST_ID = :OLD.POST_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_user_cover_photo_trigger
-- 	AFTER DELETE ON USER_COVER_PHOTO
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM POST WHERE POST_ID = :OLD.POST_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_suggestions_trigger
-- 	AFTER DELETE ON SUGGESTIONS
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM POST WHERE POST_ID = :OLD.POST_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_post_trigger
-- 	AFTER DELETE ON POST
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM CARD_DESCRIPTION WHERE DESCRIPTION_ID = :OLD.DESCRIPTION_ID;
-- 	DELETE FROM POST_COMMENT WHERE POST_ID = :OLD.POST_ID;
-- 	DELETE FROM POST_IN_EVENT_DISCUSSION WHERE POST_ID = :OLD.POST_ID;
-- 	DELETE FROM POST_IN_GROUP WHERE POST_ID = :OLD.POST_ID;
-- 	DELETE FROM POST_REACT WHERE POST_ID = :OLD.POST_ID;
-- 	DELETE FROM POST_SHARED_BY_USER WHERE POST_ID = :OLD.POST_ID;
-- 	DELETE FROM POST_SHARED_IN_EVENT_DISCUSSION WHERE POST_ID = :OLD.POST_ID;
-- 	DELETE FROM POST_SHARED_IN_GROUP WHERE POST_ID = :OLD.POST_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_card_description_trigger
-- 	AFTER DELETE ON CARD_DESCRIPTION
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM CARD_DESCRIPTION_MEDIA WHERE DESCRIPTION_ID = :OLD.DESCRIPTION_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_card_description_media_trigger
-- 	AFTER DELETE ON CARD_DESCRIPTION_MEDIA
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM MEDIA WHERE MEDIA_ID = :OLD.MEDIA_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_post_comment_trigger
-- 	AFTER DELETE ON POST_COMMENT
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM COMMENT_REPLY WHERE COMMENT_ID = :OLD.COMMENT_ID;
-- 	DELETE FROM CARD_DESCRIPTION_MEDIA WHERE DESCRIPTION_ID = :OLD.DESCRIPTION_ID;
-- 	DELETE FROM COMMENT_REACT WHERE COMMENT_ID = :OLD.COMMENT_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_comment_reply_trigger
-- 	AFTER DELETE ON COMMENT_REPLY
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM REPLY_REACT WHERE REPLY_ID = :OLD.REPLY_ID;
-- 	DELETE FROM CARD_DESCRIPTION_MEDIA WHERE DESCRIPTION_ID = :OLD.DESCRIPTION_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_message_trigger
-- 	AFTER DELETE ON MESSAGE
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM CARD_DESCRIPTION WHERE DESCRIPTION_ID = :OLD.DESCRIPTION_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_marketplace_trigger
-- 	AFTER DELETE ON MARKETPLACE
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM POST WHERE POST_ID = :OLD.POST_ID;
-- 	DELETE FROM CARD_DESCRIPTION WHERE DESCRIPTION_ID = :OLD.DESCRIPTION_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_group_trigger
-- 	AFTER DELETE ON GROUP
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM CARD_DESCRIPTION WHERE DESCRIPTION_ID = :OLD.DESCRIPTION_ID;
-- 	DELETE FROM POST_SHARED_IN_GROUP WHERE GROUP_ID = :OLD.GROUP_ID;
-- 	DELETE FROM GROUP_MEMBERS WHERE GROUP_ID = :OLD.GROUP_ID;
-- 	DELETE FROM GROUP_OWNED WHERE GROUP_ID = :OLD.GROUP_ID;
-- 	DELETE FROM POST_IN_GROUP WHERE GROUP_ID = :OLD.GROUP_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_post_comment_trigger
-- 	AFTER DELETE ON POST_COMMENT
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM CARD_DESCRIPTION WHERE DESCRIPTION_ID = :OLD.DESCRIPTION_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_events_trigger
-- 	AFTER DELETE ON EVENTS
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM CARD_DESCRIPTION WHERE DESCRIPTION_ID = :OLD.DESCRIPTION_ID;
-- 	END;
-- 	/

-- CREATE OR REPLACE TRIGGER delete_comment_reply_trigger
-- 	AFTER DELETE ON COMMENT_REPLY
-- 	FOR EACH ROW
-- 	BEGIN
-- 	DELETE FROM CARD_DESCRIPTION WHERE DESCRIPTION_ID = :OLD.DESCRIPTION_ID;
-- 	END;
-- 	/

INSERT INTO POST_TYPE VALUES ('user_post');
INSERT INTO POST_TYPE VALUES ('profilepic');
INSERT INTO POST_TYPE VALUES ('coverphoto');
INSERT INTO MEDIA_TYPE VALUES ('image');


CREATE TABLE new_table(
 USER_ID NUMBER NOT NULL,
 POST_ID NUMBER NOT NULL,
 PRIMARY KEY (USER_ID,POST_ID),
 FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
 FOREIGN KEY (POST_ID) REFERENCES POST (POST_ID) ON DELETE CASCADE
);

RENAME USER_PROFILE_PIC TO old_table;
RENAME new_table TO USER_PROFILE_PIC;

DROP TABLE old_table;


INSERT INTO USERS (user_name, password, mobile_number, birth_date, email) VALUES ('00', '00', '00', SYSDATE, '00');


SELECT * FROM users;


insert into REACTIONS values('like');
SELECT * FROM REACTIONS r ;
SELECT * FROM POST_REACT pr ;

-----

drop trigger insert_group_member_log_trigger;


drop trigger insert_group_log_trigger;


drop trigger insert_user_log_trigger;


drop trigger insert_post_log_trigger;


drop table activity_log;


CREATE TABLE ACTIVITY_LOG (
    activity_id NUMBER GENERATED ALWAYS AS IDENTITY UNIQUE NOT NULL,
    user_id NUMBER, 
    activity_type VARCHAR2(50) NOT NULL, 
    activity_timestamp TIMESTAMP NOT NULL, 
    target_id NUMBER,
    target_type VARCHAR(50)
);

CREATE OR REPLACE TRIGGER insert_post_log_trigger
AFTER INSERT ON POST
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:NEW.user_id, 'new_post', SYSTIMESTAMP, :NEW.post_id, 'post_id');
END;
/

CREATE OR REPLACE TRIGGER insert_comment_log_trigger
AFTER INSERT ON POST_COMMENT
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:NEW.user_id, 'new_comment', SYSTIMESTAMP, :NEW.comment_id, 'comment_id');
END;
/

CREATE OR REPLACE TRIGGER insert_reply_log_trigger
AFTER INSERT ON COMMENT_REPLY
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:NEW.user_id, 'new_reply', SYSTIMESTAMP, :NEW.reply_id, 'reply_id');
END;
/

CREATE OR REPLACE TRIGGER insert_user_log_trigger
AFTER INSERT ON USERS
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp)
    VALUES (:NEW.user_id, 'new_user', SYSTIMESTAMP);
END;
/

CREATE OR REPLACE TRIGGER insert_group_log_trigger
AFTER INSERT ON GROUPS
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:NEW.user_id, 'new_group', SYSTIMESTAMP, :NEW.group_id, 'group_id');
END;
/

CREATE OR REPLACE TRIGGER insert_group_owned_log_trigger
AFTER INSERT ON GROUP_OWNED
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:NEW.user_id, 'own_group', SYSTIMESTAMP, :NEW.group_id, 'group_id');
END;
/

CREATE OR REPLACE TRIGGER insert_group_member_log_trigger
AFTER INSERT ON GROUP_MEMBERS
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:NEW.user_id, 'join_group', SYSTIMESTAMP, :NEW.group_id, 'group_id');
END;
/

CREATE OR REPLACE TRIGGER insert_message_log_trigger
AFTER INSERT ON MESSAGE
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:NEW.sender_id, 'new_chat', SYSTIMESTAMP, :NEW.message_id, 'message_id');
END;
/

CREATE OR REPLACE TRIGGER delete_user_log_trigger
BEFORE INSERT ON USERS
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp)
    VALUES (:OLD.user_id, 'delete_user', SYSTIMESTAMP);
END;
/

CREATE OR REPLACE TRIGGER delete_friend_log_trigger
BEFORE DELETE ON BEFRIENDS
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:OLD.user_id, 'delete_friend', SYSTIMESTAMP, :OLD.friend_id, 'user_id');
END;
/

CREATE OR REPLACE TRIGGER delete_request_log_trigger
BEFORE DELETE ON FRIEND_REQ
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:OLD.user_id, 'delete_request', SYSTIMESTAMP, :OLD.friend_req_id, 'user_id');
END;
/

CREATE OR REPLACE TRIGGER insert_request_log_trigger
AFTER INSERT ON FRIEND_REQ
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:NEW.user_id, 'new_request', SYSTIMESTAMP, :NEW.friend_req_id, 'user_id');
END;
/

CREATE OR REPLACE TRIGGER insert_friend_log_trigger
AFTER INSERT ON BEFRIENDS
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:NEW.user_id, 'new_friend', SYSTIMESTAMP, :NEW.fri


CREATE OR REPLACE TRIGGER insert_friend_log_trigger
AFTER INSERT ON BEFRIENDS
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:NEW.user_id, 'new_friend', SYSTIMESTAMP, :NEW.friend_id, 'user_id');
END;
/

CREATE OR REPLACE TRIGGER delete_group_log_trigger
BEFORE DELETE ON GROUPS
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:OLD.user_id, 'delete_group', SYSTIMESTAMP, :OLD.group_id, 'group_id');
END;
/

CREATE OR REPLACE TRIGGER insert_group_req_log_trigger
AFTER INSERT ON GROUP_REQUESTED
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:NEW.user_id, 'new_group_req', SYSTIMESTAMP, :NEW.group_id, 'group_id');
END;
/

CREATE OR REPLACE TRIGGER delete_group_req_log_trigger
BEFORE DELETE ON GROUP_REQUESTED
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:OLD.user_id, 'delete_group_req', SYSTIMESTAMP, :OLD.group_id, 'group_id');
END;
/

CREATE OR REPLACE TRIGGER delete_group_member_log_trigger
BEFORE DELETE ON GROUP_MEMBERS
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:OLD.user_id, 'delete_group_member', SYSTIMESTAMP, :OLD.group_id, 'group_id');
END;
/


CREATE OR REPLACE TRIGGER insert_post_react_log_trigger
AFTER INSERT OR UPDATE ON POST_REACT
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO ACTIVITY_LOG (user_id, activity_type, activity_timestamp, target_id, target_type)
    VALUES (:NEW.user_id, 'new_post_react', SYSTIMESTAMP, :NEW.post_id, 'post_id');
END;
/



CREATE OR REPLACE PROCEDURE INSERT_OR_UPDATE_POST_REACT (
    p_POST_ID    IN NUMBER,
    p_USER_ID    IN NUMBER,
    p_REACTION   IN VARCHAR
) IS
   REACT_COUNT NUMBER;
BEGIN
  SELECT COUNT(*) INTO REACT_COUNT
    FROM POST_REACT PR
    WHERE POST_ID=p_POST_ID
    AND USER_ID=p_USER_ID
    AND REACTION=p_REACTION;
  IF REACT_COUNT > 0 THEN
   DELETE FROM POST_REACT WHERE POST_ID=p_POST_ID AND USER_ID=p_USER_ID;
  ELSE
   UPDATE POST_REACT
   SET REACTION = p_REACTION
   WHERE POST_ID = p_POST_ID AND USER_ID = p_USER_ID;

   IF SQL%ROWCOUNT = 0 THEN
     INSERT INTO POST_REACT (POST_ID, USER_ID, REACTION)
     VALUES (p_POST_ID, p_USER_ID, p_REACTION);
   END IF;
  END IF;
END;


SELECT * FROM users;

DELETE FROM users WHERE user_id=161;

SELECT * FROM users;


SELECT * FROM POST_IN_GROUP pig ;

INSERT INTO POST_IN_GROUP (post_id, group_id) VALUES ('1','1');

SELECT * FROM POST p ;
INSERT INTO POST (user_id, description_id, post_of) VALUES ('163', '181', 'group_post') ;
SELECT * FROM POST_TYPE pt ;
INSERT INTO POST_TYPE  values('group_post');



